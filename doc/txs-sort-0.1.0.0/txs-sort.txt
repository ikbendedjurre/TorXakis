-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package txs-sort
@version 0.1.0.0


-- | Data structure for identifiers for sorts
module TorXakis.Sort.SortId

-- | Identifier for Sort
data SortId
SortId :: Name -> Id -> SortId
[name] :: SortId -> Name
[unid] :: SortId -> Id

-- | Identifier for Sort Bool
sortIdBool :: SortId

-- | Identifier for Sort Int
sortIdInt :: SortId

-- | Identifier for Sort String
sortIdString :: SortId

-- | Identifier for Sort Regex
sortIdRegex :: SortId
instance Data.Data.Data TorXakis.Sort.SortId.SortId
instance Control.DeepSeq.NFData TorXakis.Sort.SortId.SortId
instance GHC.Generics.Generic TorXakis.Sort.SortId.SortId
instance GHC.Show.Show TorXakis.Sort.SortId.SortId
instance GHC.Read.Read TorXakis.Sort.SortId.SortId
instance GHC.Classes.Ord TorXakis.Sort.SortId.SortId
instance GHC.Classes.Eq TorXakis.Sort.SortId.SortId
instance TorXakis.Sort.Id.Resettable TorXakis.Sort.SortId.SortId
instance TorXakis.Sort.Id.Identifiable TorXakis.Sort.SortId.SortId


-- | Data structure for identifiers for constructors
module TorXakis.Sort.CstrId

-- | Identifier for Constructor
data CstrId
CstrId :: Name -> Id -> [SortId] -> SortId -> CstrId
[name] :: CstrId -> Name
[unid] :: CstrId -> Id
[cstrargs] :: CstrId -> [SortId]
[cstrsort] :: CstrId -> SortId
instance Data.Data.Data TorXakis.Sort.CstrId.CstrId
instance Control.DeepSeq.NFData TorXakis.Sort.CstrId.CstrId
instance GHC.Generics.Generic TorXakis.Sort.CstrId.CstrId
instance GHC.Show.Show TorXakis.Sort.CstrId.CstrId
instance GHC.Read.Read TorXakis.Sort.CstrId.CstrId
instance GHC.Classes.Ord TorXakis.Sort.CstrId.CstrId
instance GHC.Classes.Eq TorXakis.Sort.CstrId.CstrId
instance TorXakis.Sort.Id.Resettable TorXakis.Sort.CstrId.CstrId
instance TorXakis.Sort.Id.Identifiable TorXakis.Sort.CstrId.CstrId

module TorXakis.ValExpr.FuncId
data FuncId
FuncId :: Name -> Id -> [SortId] -> SortId -> FuncId
[name] :: FuncId -> Name
[unid] :: FuncId -> Id
[funcargs] :: FuncId -> [SortId]
[funcsort] :: FuncId -> SortId
instance Data.Data.Data TorXakis.ValExpr.FuncId.FuncId
instance Control.DeepSeq.NFData TorXakis.ValExpr.FuncId.FuncId
instance GHC.Generics.Generic TorXakis.ValExpr.FuncId.FuncId
instance GHC.Show.Show TorXakis.ValExpr.FuncId.FuncId
instance GHC.Read.Read TorXakis.ValExpr.FuncId.FuncId
instance GHC.Classes.Ord TorXakis.ValExpr.FuncId.FuncId
instance GHC.Classes.Eq TorXakis.ValExpr.FuncId.FuncId
instance TorXakis.Sort.Id.Resettable TorXakis.ValExpr.FuncId.FuncId
instance TorXakis.Sort.Id.Identifiable TorXakis.ValExpr.FuncId.FuncId


-- | Interface for Sort package
module TorXakis.Sort

-- | A constructor has a <tt>isCstr</tt> functions, and a list of accessors
--   functions.
data CstrDef
CstrDef :: FuncId -> [FuncId] -> CstrDef

-- | CstrDef is instance of <tt>Resettable</tt>.

-- | Identifier for Constructor
data CstrId
CstrId :: Name -> Id -> [SortId] -> SortId -> CstrId

-- | Identifier
newtype Id
Id :: Int -> Id
[_id] :: Id -> Int

-- | Identifier is instance of <tt>Show</tt>.

-- | Types that contain values of type <tt>Id</tt> that can be reset (set
--   to zero).
class Resettable e

-- | Reset all the <tt>Id</tt>'s inside an expression.
reset :: Resettable e => e -> e

-- | Reset all the <tt>Id</tt>'s inside an expression.
reset :: (Resettable e, Generic e, GResettable (Rep e)) => e -> e

-- | Identifier is instance of <tt>Resettable</tt>.

-- | Tuple () is instance of <tt>Resettable</tt>.

-- | Bool is instance of <tt>Resettable</tt>.

-- | Char is instance of <tt>Resettable</tt>.

-- | Text is instance of <tt>Resettable</tt>.

-- | We don't want to reset <tt>Integer</tt>s, since they are not
--   <tt>Id</tt>s.

-- | Int is instance of <tt>Resettable</tt>.

-- | List is instance of <tt>Resettable</tt>, when items in list are
--   <tt>Resettable</tt>.

-- | Tuple (a,b) is instance of <tt>Resettable</tt>, when items in tuple
--   (i.e., a and b) are <tt>Resettable</tt>.

-- | Set is instance of <tt>Resettable</tt>, when items in set are
--   <tt>Resettable</tt>. Note: items in a set must be instance of
--   <tt>Ord</tt>.

-- | Map is instance of <tt>Resettable</tt>, when items in map are
--   <tt>Resettable</tt>. Note: keys of a map must be instance of
--   <tt>Ord</tt>.

-- | Generalize Resettable class
class GResettable f
gReset :: GResettable f => f e -> f e

-- | Resetting a constructor without arguments will give the same result,
--   since no <tt>Id</tt> can be found there.

-- | Resetting the product is equal to resetting each term in the product.

-- | Resetting the sum amounts to resetting the each term of it as well.

-- | We do need to do anything for resetting the meta-data.

-- | And the only interesting case: resetting the arguments of the type
--   constructors. In this case we have to use our <tt>Reset</tt> (<b>not
--   <tt>GReset</tt></b>).

-- | Values that contain at least a value of type <tt>Id</tt>.
class Identifiable e
getId :: Identifiable e => e -> Maybe Id
getId :: (Identifiable e, Generic e, GIdentifiable (Rep e)) => e -> Maybe Id

-- | The identifier of an identifier is just the identifier

-- | A Text has no identifier

-- | List is instance of <tt>Identifiable</tt>, when items in list are
--   <tt>Identifiable</tt>.

-- | Generalize Resettable class
class GIdentifiable f
gGetId :: GIdentifiable f => f e -> Maybe Id

-- | U1 has no identifier

-- | Getting the identifier of a product amounts to getting the first
--   <tt>Id</tt> identifiable of the first identifiable value. An
--   identifiable instance should contain at least one such a value, but we
--   do now check for this.

-- | TODO

-- | TODO

-- | Getting the <tt>Id</tt> of a constructor is the same as getting the
--   <tt>Id</tt> of its argument.

-- | Name of definition.
type Name = Text

-- | SortDef has no information
data SortDef
SortDef :: SortDef

-- | SortDef is instance of <tt>Resettable</tt>.

-- | Identifier for Sort
data SortId
SortId :: Name -> Id -> SortId

-- | Identifier for Sort Bool
sortIdBool :: SortId

-- | Identifier for Sort Int
sortIdInt :: SortId

-- | Identifier for Sort String
sortIdString :: SortId

-- | Identifier for Sort Regex
sortIdRegex :: SortId

-- | Sort of a value expression
class SortOf s
sortOf :: SortOf s => s -> SortId
